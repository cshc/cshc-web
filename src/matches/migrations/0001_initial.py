# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-10-07 14:51
from __future__ import unicode_literals

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('teams', '0003_auto_20171007_2101'),
        ('opposition', '0002_clubstats'),
        ('members', '0002_auto_20171007_1455'),
        ('competitions', '0002_auto_20171006_1844'),
        ('venues', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appearance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goals', models.PositiveSmallIntegerField(default=0, verbose_name='Goals scored')),
                ('own_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Own-goals scored')),
                ('green_card', models.NullBooleanField(default=None, help_text='Did the player receive a green card in the match?')),
                ('yellow_card', models.NullBooleanField(default=None, help_text='Did the player receive a yellow card in the match?')),
                ('red_card', models.NullBooleanField(default=None, help_text='Did the player receive a red card in the match?')),
            ],
            options={
                'ordering': ['match', 'member'],
            },
        ),
        migrations.CreateModel(
            name='GoalKing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('games_played', models.PositiveSmallIntegerField(default=0, verbose_name='Number of games played')),
                ('total_miles', models.PositiveIntegerField(default=0)),
                ('m1_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Goals for Mens 1sts')),
                ('m2_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Goals for Mens 2nds')),
                ('m3_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Goals for Mens 3rds')),
                ('m4_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Goals for Mens 4ths')),
                ('m5_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Goals for Mens 5ths')),
                ('l1_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Goals for Ladies 1sts')),
                ('l2_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Goals for Ladies 2nds')),
                ('l3_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Goals for Ladies 3rds')),
                ('l4_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Goals for Ladies 4ths')),
                ('mixed_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Goals for Mixed team')),
                ('indoor_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Goals for the Indoor team')),
                ('m1_own_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Own goals for Mens 1sts')),
                ('m2_own_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Own goals for Mens 2nds')),
                ('m3_own_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Own goals for Mens 3rds')),
                ('m4_own_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Own goals for Mens 4ths')),
                ('m5_own_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Own goals for Mens 5ths')),
                ('l1_own_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Own goals for Ladies 1sts')),
                ('l2_own_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Own goals for Ladies 2nds')),
                ('l3_own_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Own goals for Ladies 3rds')),
                ('l4_own_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Own goals for Ladies 4ths')),
                ('mixed_own_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Own goals for Mixed team')),
                ('indoor_own_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Own goals for the Indoor team')),
                ('total_goals', models.PositiveSmallIntegerField(editable=False, verbose_name='Total goals')),
                ('total_own_goals', models.PositiveSmallIntegerField(editable=False, verbose_name='Total own goals')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Member')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competitions.Season')),
            ],
            options={
                'ordering': ['season', 'member'],
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_away', models.CharField(choices=[('Home', 'Home'), ('Away', 'Away')], default='Home', max_length=5, verbose_name='Home/Away')),
                ('fixture_type', models.CharField(choices=[('Friendly', 'Friendly'), ('League', 'League'), ('Cup', 'Cup')], default='League', max_length=10, verbose_name='Fixture type')),
                ('date', models.DateField(verbose_name='Fixture date')),
                ('time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start time')),
                ('alt_outcome', models.CharField(blank=True, choices=[('Postponed', 'Postponed'), ('Cancelled', 'Cancelled'), ('Walkover', 'Walkover'), ('BYE', 'BYE'), ('Abandoned', 'Abandoned')], default=None, max_length=10, null=True, verbose_name='Alternative outcome')),
                ('our_score', models.PositiveSmallIntegerField(blank=True, default=None, null=True, verbose_name='Our score')),
                ('opp_score', models.PositiveSmallIntegerField(blank=True, default=None, null=True, verbose_name="Opposition's score")),
                ('our_ht_score', models.PositiveSmallIntegerField(blank=True, default=None, null=True, verbose_name='Our half-time score')),
                ('opp_ht_score', models.PositiveSmallIntegerField(blank=True, default=None, null=True, verbose_name="Opposition's half-time score")),
                ('opp_own_goals', models.PositiveSmallIntegerField(default=0, verbose_name='Opposition own-goals')),
                ('pre_match_hype', ckeditor.fields.RichTextField(blank=True, verbose_name='Pre-match hype')),
                ('report_title', models.CharField(blank=True, max_length=200, verbose_name='Match report title')),
                ('report_body', ckeditor.fields.RichTextField(blank=True, verbose_name='Match report')),
                ('report_pub_timestamp', models.DateTimeField(default=None, editable=False, null=True, verbose_name='Match report publish timestamp')),
                ('ignore_for_goal_king', models.BooleanField(default=False, help_text='Ignore this match when compiling Goal King stats')),
                ('ignore_for_southerners', models.BooleanField(default=False, help_text='Ignore this match when compiling Southerners League stats')),
                ('override_kit_clash', models.BooleanField(default=False, help_text='Ignore normal kit-clash with this club for this match')),
                ('gpg_pro_rata', models.FloatField(default=1.0, help_text='Goals-per-game multiplier. Only change this from the default value for matches of a different length.')),
                ('cup', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='competitions.Cup')),
                ('division', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='competitions.Division')),
                ('opp_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='opposition.Team', verbose_name='Opposition team')),
                ('our_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='teams.ClubTeam', verbose_name='Our team')),
                ('players', models.ManyToManyField(related_name='matches', through='matches.Appearance', to='members.Member')),
                ('report_author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='match_reports', to='members.Member', verbose_name='Match report author')),
                ('season', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='competitions.Season')),
                ('venue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='venues.Venue')),
            ],
            options={
                'verbose_name_plural': 'matches',
                'ordering': ['date', 'time'],
            },
        ),
        migrations.AddField(
            model_name='appearance',
            name='match',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appearances', to='matches.Match'),
        ),
        migrations.AddField(
            model_name='appearance',
            name='member',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appearances', to='members.Member'),
        ),
        migrations.AlterUniqueTogether(
            name='goalking',
            unique_together=set([('member', 'season')]),
        ),
        migrations.AlterUniqueTogether(
            name='appearance',
            unique_together=set([('member', 'match')]),
        ),
    ]
